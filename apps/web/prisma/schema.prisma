// schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DB_CONNECTION")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(uuid())
  name      String?
  email     String   @unique
  avatarUrl String?
  createdAt DateTime @default(now())

  hostedLobbies Lobby[]       @relation("UserHost")
  lobbyPlayers  LobbyPlayer[]
}

model Guest {
  id          String   @id @default(uuid())
  displayName String?
  avatar      String? // optional emoji or URL
  createdAt   DateTime @default(now())

  hostedLobbies Lobby[]       @relation("GuestHost")
  lobbyPlayers  LobbyPlayer[]
}

// ------------------------------------------------------------------

model Lobby {
  id              String  @id @default(uuid())
  name String
  maxPlayers Int
  lobbyIdentifier String  @unique
  code            String  @unique
  private         Boolean @default(false)
  pin             String? // optional PIN for private lobbies

  // New fields for explicit foreign keys
  hostUserId  String?
  hostGuestId String?

  // Relations: One must be set based on the host type
  hostUser  User?  @relation("UserHost", fields: [hostUserId], references: [id])
  hostGuest Guest? @relation("GuestHost", fields: [hostGuestId], references: [id])

  // Removed hostId and hostType as they are no longer necessary for the relations

  players       LobbyPlayer[]
  leaderboardId String? // optional future link
  activeGameId  String? // optional current game reference

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Added index for performance
  @@index([hostUserId])
  @@index([hostGuestId])
}

// ------------------------------------------------------------------

model LobbyPlayer {
  id      String @id @default(uuid())
  lobbyId String
  lobby   Lobby  @relation(fields: [lobbyId], references: [id])

  userId  String?
  user    User?   @relation(fields: [userId], references: [id])
  guestId String?
  guest   Guest?  @relation(fields: [guestId], references: [id])

  displayName String
  avatar      String?
  score       Int     @default(0)

  joinedAt DateTime  @default(now())
  leftAt   DateTime?

  // Added a constraint to enforce that *either* userId or guestId is present
  @@unique([lobbyId, userId])
  @@unique([lobbyId, guestId]) // This ensures a guest can only join a specific lobby once
  @@index([userId])
  @@index([guestId])
}

// Removed the HostType enum as it's not strictly necessary with this approach, 
// as the presence of hostUserId or hostGuestId indicates the host type.
